name: Deploy to AKS

on:
  workflow_dispatch:
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Azure CLI
    - name: Set up Azure CLI
      uses: azure/setup-azurecli@v1

    # Step 3: Log in to Azure using Service Principal
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    
    # Step 4: Log in to ACR (Azure Container Registry)
    - name: Log in to ACR
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
    
    # Step 5: Build and Push Frontend Docker Image
    - name: Build and Push Frontend Docker Image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}/frontend:latest ./frontend
        docker push ${{ secrets.ACR_NAME }}/frontend:latest

    # Step 6: Build and Push Backend Docker Image
    - name: Build and Push Backend Docker Image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}/backend:latest ./backend
        docker push ${{ secrets.ACR_NAME }}/backend:latest

    # Step 7: Configure kubectl to access AKS
    - name: Configure kubectl to access AKS
      run: |
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    # Step 8: Deploy the Frontend and Backend to AKS
    - name: Deploy Frontend to AKS
      run: |
        kubectl set image deployment/frontend frontend=${{ secrets.ACR_NAME }}/frontend:latest --record
        kubectl rollout status deployment/frontend

    - name: Deploy Backend to AKS
      run: |
        kubectl set image deployment/backend backend=${{ secrets.ACR_NAME }}/backend:latest --record
        kubectl rollout status deployment/backend
