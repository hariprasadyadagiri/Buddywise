name: CI/CD Pipeline

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          #enable-AzPSSession: true
          #enable-AzPSSession: false
          auth-type: SERVICE_PRINCIPAL
          #allow-no-subscription: true 

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build Docker images
        run: |
          docker build -t myapp-backend:latest ./backend
          docker build -f frontend/todo/Dockerfile -t myapp-frontend:latest ./frontend/todo
          docker tag myapp-backend:latest ${{ secrets.REGISTRY_LOGIN_SERVER }}/myapp-backend:latest
          docker tag myapp-frontend:latest ${{ secrets.REGISTRY_LOGIN_SERVER }}/myapp-frontend:latest

      - name: Push Docker images to ACR
        run: |
          az acr login --name acrbuddywise.azurecr.io
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/myapp-backend:latest
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/myapp-frontend:latest

      # Step 7: Configure kubectl to access AKS
      - name: Configure kubectl to access AKS
        run: |
          az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }}
      
      - name: Create namespace if it doesn't exist
        run: |
          kubectl get namespace prod || kubectl create namespace prod
        
      # Step 8: Apply Kubernetes manifests
      - name: Deploy Kubernetes manifests
        run: |
          kubectl apply -f k8s/frontend-deployment.yml -n prod
          kubectl apply -f k8s/frontend-service.yml -n prod
          kubectl apply -f k8s/backend-deployment.yml -n prod
          kubectl apply -f k8s/backend-service.yml -n prod

      # Step 9: Deploy updated images
      - name: Deploy myapp-frontend to AKS
        run: |
          kubectl set image deployment/myapp-frontend myapp-frontend=${{ secrets.REGISTRY_LOGIN_SERVER }}/myapp-frontend:latest -n prod
          kubectl rollout status deployment/myapp-frontend -n prod

      - name: Deploy myapp-backend to AKS
        run: |
          kubectl set image deployment/myapp-backend myapp-backend=${{ secrets.REGISTRY_LOGIN_SERVER }}/myapp-backend:latest -n prod
          kubectl rollout status deployment/myapp-backend -n prod
    
